
load os.fs
load web.http
load pkgtools.archive
load zip

class DaoPKG
{
	var  pkgPath = ""

	routine DaoPKG(){ Init() }

	routine Init()

	static routine Get( url: string, save = "" )
	static routine Zip( input: string, output = "" )
	static routine Unzip( input: string, output = "" )
}

routine DaoPKG::Init()
{
	entry = fs::dir( std::program( $binary ) )
	if( entry.exists( "../lib" ) ){
		entry = (fs::dir) entry[ "../lib" ];
	}else{
		entry = entry.mkdir( "../lib" )
	}
	if( entry.exists( "daopkg" ) ){
		entry = (fs::dir) entry[ "daopkg" ]
	}else{
		entry = entry.mkdir( "./daopkg" )
	}
	pkgPath = entry.path

	text = io.read( pkgPath + "./modules.dao", 1 )
	io.writeln( text )
}

# Download file:
static routine DaoPKG::Get( url: string, save = "" )
{
	data = Client::Get( url, $GET )

	if( save == "" ){
		caps = url.capture( "/ ( [^/]* %. %w+ ) $" )
		if( % caps ) save = caps[1]
	}
	if( save == "" ){
		io.writeln( data )
	}else{
		fout = io::open( save, "w+" )
		fout.write( data )
		fout.close()
	}
}

# Archive and compress files:
static routine DaoPKG::Zip( input: string, output = "" )
{
	if( output == "" ) output = input.change( "[%/%\\] $", "" ) + ".dz"
	if( not fs::exists( input ) ) std::error( "Input path not exist: " + input )
	if( fs::exists( output ) ) std::error( "Output path already exist: " + output )
	
	archive = Archive()
	archive.Add( input )

	data = zip::Compress( archive.GetBuffer() )
	fout = io::open( output, "w+" )
	fout.write( data )
	fout.close()
	return output
}

# Decompress and extract files:
static routine DaoPKG::Unzip( input: string, output = "" )
{
	if( output == "" ) output = input.change( "{{.dz}} $", "" )
	if( not fs::exists( input ) ) std::error( "Input path not exist: " + input )
	if( fs::entry( input ).kind != $file ) std::error( "Input path is not a file: " + input )
	if( fs::exists( output ) ) std::error( "Output path already exist: " + output )

	data = zip::Decompress( io.read( input ) )
	Archive::Extract( data, output )
	return output
}

# /projects/DaoAchive/doc/tip/deps/OpenBLAS-0.2.11.dz

routine main( ... as args )
{
	io.writeln( "Error: invalid arguments", args )
	pkg = DaoPKG()
	io.writeln( pkg.pkgPath )
}

routine main( command: enum<get>, url: string, save = "" )
{
	DaoPKG::Get( url, save )
}
routine main( command: enum<zip>, input: string, output = "" )
{
	DaoPKG::Zip( input, output )
}
routine main( command: enum<unzip>, input: string, output = "" )
{
	DaoPKG::Unzip( input, output )
}
routine main( command: enum<testzip>, input: string, output = "" )
{
	input2 = DaoPKG::Zip( input )
	DaoPKG::Unzip( input2, output )
}
