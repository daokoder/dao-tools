
###########################################################################
#
# Create a project named "Dao", which can be accessed by other
# DaoMake files using DaoMake::FindPackage( "Dao" ).
#
###########################################################################

daojs = DaoMake::Project( "Dao" )


###########################################################################
#
# Options to enable/disable language features:
#
###########################################################################

daojs_with_numarray   = $ON;
daojs_with_decorator  = $ON;
daojs_with_thread     = $OFF;
daojs_with_concurrent = $OFF;


###########################################################################
#
# project.AddDefinition( "DEFINITION_NAME" ) will add "-DDEFINITION_NAME"
# to the compiling flags of all its targets.
#
###########################################################################

if( daojs_with_numarray   == $ON ) daojs.AddDefinition( "DAO_WITH_NUMARRAY" )
if( daojs_with_decorator  == $ON ) daojs.AddDefinition( "DAO_WITH_DECORATOR" )
if( daojs_with_thread     == $ON ) daojs.AddDefinition( "DAO_WITH_THREAD" )
if( daojs_with_concurrent == $ON ) daojs.AddDefinition( "DAO_WITH_CONCURRENT" )

changeset = DaoMake::ReadFile( DaoMake::MakePath( DaoMake::SourcePath(), "../../manifest.uuid" ), 1 )
if( % changeset ) daojs.AddDefinition( "CHANGESET_ID", "\\\"FOS." + changeset[:11] + "\\\"" )


###########################################################################
#
# Header and source file lists:
#
###########################################################################

daojs_kernel_headers =
{
	"../../kernel/dao.h" ,
	"../../kernel/daoBase.h" ,
	"../../kernel/daoClass.h" ,
	"../../kernel/daoConst.h" ,
	"../../kernel/daoGC.h" ,
	"../../kernel/daoLexer.h" ,
	"../../kernel/daoList.h" ,
	"../../kernel/daoMap.h" ,
	"../../kernel/daoNamespace.h" ,
	"../../kernel/daoNumtype.h" ,
	"../../kernel/daoObject.h" ,
	"../../kernel/daoParser.h" ,
	"../../kernel/daoBytecode.h" ,
	"../../kernel/daoInferencer.h" ,
	"../../kernel/daoOptimizer.h" ,
	"../../kernel/daoProcess.h" ,
	"../../kernel/daoRegex.h" ,
	"../../kernel/daoRoutine.h" ,
	"../../kernel/daoTasklet.h" ,
	"../../kernel/daoStdlib.h" ,
	"../../kernel/daoStdtype.h" ,
	"../../kernel/daoStream.h" ,
	"../../kernel/daoString.h" ,
	"../../kernel/daoThread.h" ,
	"../../kernel/daoPlatform.h" ,
	"../../kernel/daoInterface.h" ,
	"../../kernel/daoType.h" ,
	"../../kernel/daoValue.h" ,
	"../../kernel/daoVmcode.h" ,
	"../../kernel/daoVmspace.h" 
}

daojs_kernel_sources =
{
	"../../kernel/daoClass.c" ,
	"../../kernel/daoConst.c" ,
	"../../kernel/daoGC.c" ,
	"../../kernel/daoLexer.c" ,
	"../../kernel/daoList.c" ,
	"../../kernel/daoMap.c" ,
	"../../kernel/daoNamespace.c" ,
	"../../kernel/daoNumtype.c" ,
	"../../kernel/daoObject.c" ,
	"../../kernel/daoParser.c" ,
	"../../kernel/daoBytecode.c" ,
	"../../kernel/daoInferencer.c" ,
	"../../kernel/daoOptimizer.c" ,
	"../../kernel/daoRoutine.c" ,
	"../../kernel/daoProcess.c" ,
	"../../kernel/daoValue.c" ,
	"../../kernel/daoType.c" ,
	"../../kernel/daoInterface.c" ,
	"../../kernel/daoRegex.c" ,
	"../../kernel/daoTasklet.c" ,
	"../../kernel/daoStdlib.c" ,
	"../../kernel/daoStdtype.c" ,
	"../../kernel/daoStream.c" ,
	"../../kernel/daoString.c" ,
	"../../kernel/daoThread.c" ,
	"../../kernel/daoPlatform.c" ,
	"../../kernel/daoVmcode.c" ,
	"../../kernel/daoVmspace.c" 
}



###########################################################################
#
# daojs.AddObjects( source_file_list, header_file_list ) will create an object
# set that includes the objects compiled from the "source_file_list":
#
###########################################################################
daojs_kernel_objects = daojs.AddObjects( daojs_kernel_sources, daojs_kernel_headers )


daojs.AddIncludePath( "../../kernel" )


###########################################################################
#
# Add platform specific flags:
#
###########################################################################

daojs.AddPlatformDefs();

if( DaoMake::IsPlatform( "UNIX" ) ){
	daojs.AddCompilingFlag( "-fPIC" )
}else if( DaoMake::IsPlatform( "MINGW" ) ){
	daojs.AddLinkingFlag( "-lwinmm" )
}


###########################################################################
#
# Add an javascript target:
#
###########################################################################
ems_export  = @[]"['_DaoInit','_DaoQuit',@[]
ems_export += @[]'_DaoVmSpace_AcquireProcess',@[]
ems_export += @[]'_DaoVmSpace_GetNamespace',@[]
ems_export += @[]'_DaoVmSpace_StdioStream',@[]
ems_export += @[]'_DaoProcess_Eval',@[]
ems_export += @[]'_DaoStream_WriteChars',@[]

daojs_modules = daojs.AddObjects( { "../../kernel/daoMain.c", "dao_webdemo.c" }, daojs_kernel_headers );

daojs_modules.AddIncludePath( "../../modules/auxlib" )

if( DaoMake::IsDir( "../../modules/bigint" ) ){
	daojs_modules.AddSources( "../../modules/bigint/dao_bigint.c" )
	ems_export += @[]'_DaoBigint_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/binary" ) ){
	daojs_modules.AddIncludePath( "../../modules/binary" )
	daojs_modules.AddHeaders( "../../modules/binary/dao_binary.h" )
	daojs_modules.AddSources( "../../modules/binary/dao_binary.c" )
	ems_export += @[]'_DaoBinary_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/coroutine" ) ){
	daojs_modules.AddIncludePath( "../../modules/coroutine" )
	daojs_modules.AddSources( "../../modules/coroutine/dao_coroutine.c" )
	ems_export += @[]'_DaoCoroutine_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/crypto" ) ){
	daojs_modules.AddIncludePath( "../../modules/crypto" )
	daojs_modules.AddSources( "../../modules/crypto/dao_crypto.c" )
	ems_export += @[]'_DaoMeta_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/dataframe" ) ){
	daojs_modules.AddIncludePath( "../../modules/dataframe" )
	daojs_modules.AddSources( "../../modules/dataframe/dao_dataframe.c" )
	ems_export += @[]'_DaoDataframe_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/math" ) ){
	daojs_modules.AddIncludePath( "../../modules/math" )
	daojs_modules.AddSources( "../../modules/math/dao_math.c" )
	ems_export += @[]'_DaoMath_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/meta" ) ){
	daojs_modules.AddIncludePath( "../../modules/meta" )
	daojs_modules.AddSources( "../../modules/meta/dao_meta.c" )
	ems_export += @[]'_DaoMeta_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/serializer" ) ){
	daojs_modules.AddIncludePath( "../../modules/serializer" )
	daojs_modules.AddSources( "../../modules/serializer/dao_serializer.c" )
	ems_export += @[]'_DaoSerializer_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/statistics" ) ){
	daojs_modules.AddIncludePath( "../../modules/statistics" )
	daojs_modules.AddSources( "../../modules/statistics/dao_statistics.c" )
	ems_export += @[]'_DaoStatistics_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/string/format" ) ){
	daojs_modules.AddIncludePath( "../../modules/string/format" )
	daojs_modules.AddSources( "../../modules/string/format/dao_format.c" )
	ems_export += @[]'_DaoFormat_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/string/scanner" ) ){
	daojs_modules.AddIncludePath( "../../modules/string/scanner" )
	daojs_modules.AddSources( "../../modules/string/scanner/dao_scanner.c" )
	ems_export += @[]'_DaoScanner_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/string/template" ) ){
	daojs_modules.AddIncludePath( "../../modules/string/template" )
	daojs_modules.AddSources( "../../modules/string/template/dao_template.c" )
	ems_export += @[]'_DaoTemplate_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/time" ) ){
	daojs_modules.AddIncludePath( "../../modules/time" )
	daojs_modules.AddSources( "../../modules/time/dao_time.c" )
	ems_export += @[]'_DaoTime_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/web/html" ) ){
	sources =
	{
		"../../modules/web/html/gumbo-parser/src/attribute.c",
		"../../modules/web/html/gumbo-parser/src/parser.c",
		"../../modules/web/html/gumbo-parser/src/tag.c",
		"../../modules/web/html/gumbo-parser/src/util.c",
		"../../modules/web/html/gumbo-parser/src/char_ref.c",
		"../../modules/web/html/gumbo-parser/src/string_buffer.c",
		"../../modules/web/html/gumbo-parser/src/tokenizer.c",
		"../../modules/web/html/gumbo-parser/src/vector.c",
		"../../modules/web/html/gumbo-parser/src/error.c",
		"../../modules/web/html/gumbo-parser/src/string_piece.c",
		"../../modules/web/html/gumbo-parser/src/utf8.c"
	}
	#daojs.AddCompilingFlag( "-std=c99" )
	daojs_modules.AddIncludePath( "../../modules/web/html" )
	daojs_modules.AddIncludePath( "../../modules/web/html/gumbo-parser/src" )
	daojs_modules.AddSources( "../../modules/web/html/dao_html.c" )
	daojs_modules.AddSources( sources )
	ems_export += @[]'_DaoHtml_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/web/json" ) ){
	daojs_modules.AddIncludePath( "../../modules/web/json" )
	daojs_modules.AddSources( "../../modules/web/json/dao_json.c" )
	ems_export += @[]'_DaoJson_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/image" ) ){
	sources = 
	{
		"../../modules/image/source/dao_image.c" ,
		"../../modules/image/source/lode_png.c" ,
		"../../modules/image/source/micro_jpeg.c" 
	}

	daojs_modules.AddIncludePath( "../../modules/image/source" )
	daojs_modules.AddSources( sources )
	ems_export += @[]'_DaoImage_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/canvas" ) ){
	sources = 
	{
		"../../modules/canvas/source/dao_common.c" ,
		"../../modules/canvas/source/dao_font.c" ,
		"../../modules/canvas/source/dao_path.c" ,
		"../../modules/canvas/source/dao_canvas.c" ,
		"../../modules/canvas/source/dao_painter.c" ,
		"../../modules/canvas/source/dao_rasterizer.c" ,
		"../../modules/canvas/source/dao_onload.c" 
	}

	daojs_modules.AddIncludePath( "../../modules/canvas/source" )
	daojs_modules.AddSources( sources )
	ems_export += @[]'_DaoCanvas_OnLoad',@[]
}

if( DaoMake::IsDir( "../../modules/zip" ) ){
	sources = {
		"../../modules/zip/dao_zip.c" ,
		"../../modules/zip/bzip2/blocksort.c" ,
		"../../modules/zip/bzip2/huffman.c" ,
		"../../modules/zip/bzip2/crctable.c" ,
		"../../modules/zip/bzip2/randtable.c" ,
		"../../modules/zip/bzip2/compress.c" ,
		"../../modules/zip/bzip2/decompress.c" ,
		"../../modules/zip/bzip2/bzlib.c"
	}

	daojs_modules.AddIncludePath( "../../modules/zip" )
	daojs_modules.AddIncludePath( "../../modules/zip/bzip2" )
	daojs_modules.AddSources( sources )
	ems_export += @[]'_DaoZip_OnLoad',@[]
}


ems_export += @[]'_DaoWebDemo_AddModules']"@[]

daojs_js = daojs.AddJavaScriptLibrary( "dao", daojs_kernel_objects, daojs_modules )
daojs_kernel_objects.AddDefinition( "DAO_BUILD_JS_TARGET" )
daojs_kernel_objects.AddDefinition( "DAO_WITHOUT_DLL" )
daojs_kernel_objects.AddDefinition( "DAO_WITHOUT_COLORPRINT" )
daojs_kernel_objects.AddDefinition( "WITHOUT_WCTYPE_H" )
daojs_kernel_objects.AddDefinition( "WITHOUT_DIRECT_THREADING" )
daojs_js.AddLinkingFlag( "-s EXPORTED_FUNCTIONS=" + ems_export )
daojs_js.AddLinkingFlag( "-s ASM_JS=1" )
if( DaoMake::BuildMode() == $RELEASE ) daojs_js.AddLinkingFlag( "-O2 --closure 1" )
